// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ContactStore

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENotFound TErrorCode = -1
  TErrorCode_EUnknown TErrorCode = -2
  TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENotFound: return "ENotFound"
  case TErrorCode_EUnknown: return "EUnknown"
  case TErrorCode_EDataExisted: return "EDataExisted"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENotFound": return TErrorCode_ENotFound, nil 
  case "EUnknown": return TErrorCode_EUnknown, nil 
  case "EDataExisted": return TErrorCode_EDataExisted, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TKey string

func TKeyPtr(v TKey) *TKey { return &v }

// Attributes:
//  - PubKeyHex
//  - DisplayName
//  - Emails
//  - PhoneNumbers
//  - Gender
//  - ProfilePicture
//  - CoverPicture
//  - TimeAdd
//  - TimeLastConversation
type TKContactItem struct {
  PubKeyHex TKey `thrift:"pubKeyHex,1" db:"pubKeyHex" json:"pubKeyHex"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  Emails []string `thrift:"emails,3" db:"emails" json:"emails"`
  PhoneNumbers []string `thrift:"phoneNumbers,4" db:"phoneNumbers" json:"phoneNumbers"`
  Gender int32 `thrift:"gender,5" db:"gender" json:"gender"`
  ProfilePicture string `thrift:"profilePicture,6" db:"profilePicture" json:"profilePicture"`
  CoverPicture string `thrift:"coverPicture,7" db:"coverPicture" json:"coverPicture"`
  TimeAdd string `thrift:"timeAdd,8" db:"timeAdd" json:"timeAdd"`
  TimeLastConversation string `thrift:"timeLastConversation,9" db:"timeLastConversation" json:"timeLastConversation"`
}

func NewTKContactItem() *TKContactItem {
  return &TKContactItem{}
}


func (p *TKContactItem) GetPubKeyHex() TKey {
  return p.PubKeyHex
}

func (p *TKContactItem) GetDisplayName() string {
  return p.DisplayName
}

func (p *TKContactItem) GetEmails() []string {
  return p.Emails
}

func (p *TKContactItem) GetPhoneNumbers() []string {
  return p.PhoneNumbers
}

func (p *TKContactItem) GetGender() int32 {
  return p.Gender
}

func (p *TKContactItem) GetProfilePicture() string {
  return p.ProfilePicture
}

func (p *TKContactItem) GetCoverPicture() string {
  return p.CoverPicture
}

func (p *TKContactItem) GetTimeAdd() string {
  return p.TimeAdd
}

func (p *TKContactItem) GetTimeLastConversation() string {
  return p.TimeLastConversation
}
func (p *TKContactItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKContactItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.PubKeyHex = temp
}
  return nil
}

func (p *TKContactItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *TKContactItem)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Emails =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Emails = append(p.Emails, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TKContactItem)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PhoneNumbers =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.PhoneNumbers = append(p.PhoneNumbers, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TKContactItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Gender = v
}
  return nil
}

func (p *TKContactItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ProfilePicture = v
}
  return nil
}

func (p *TKContactItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CoverPicture = v
}
  return nil
}

func (p *TKContactItem)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TimeAdd = v
}
  return nil
}

func (p *TKContactItem)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TimeLastConversation = v
}
  return nil
}

func (p *TKContactItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TKContactItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKContactItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubKeyHex", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pubKeyHex: ", p), err) }
  if err := oprot.WriteString(string(p.PubKeyHex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubKeyHex (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pubKeyHex: ", p), err) }
  return err
}

func (p *TKContactItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *TKContactItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("emails", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:emails: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Emails {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:emails: ", p), err) }
  return err
}

func (p *TKContactItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneNumbers", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phoneNumbers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PhoneNumbers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PhoneNumbers {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phoneNumbers: ", p), err) }
  return err
}

func (p *TKContactItem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gender", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gender: ", p), err) }
  if err := oprot.WriteI32(int32(p.Gender)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gender (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gender: ", p), err) }
  return err
}

func (p *TKContactItem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("profilePicture", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:profilePicture: ", p), err) }
  if err := oprot.WriteString(string(p.ProfilePicture)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.profilePicture (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:profilePicture: ", p), err) }
  return err
}

func (p *TKContactItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coverPicture", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:coverPicture: ", p), err) }
  if err := oprot.WriteString(string(p.CoverPicture)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coverPicture (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:coverPicture: ", p), err) }
  return err
}

func (p *TKContactItem) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeAdd", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:timeAdd: ", p), err) }
  if err := oprot.WriteString(string(p.TimeAdd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeAdd (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:timeAdd: ", p), err) }
  return err
}

func (p *TKContactItem) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeLastConversation", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:timeLastConversation: ", p), err) }
  if err := oprot.WriteString(string(p.TimeLastConversation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeLastConversation (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:timeLastConversation: ", p), err) }
  return err
}

func (p *TKContactItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKContactItem(%+v)", *p)
}

// Attributes:
//  - PubKey
//  - ListFriend
type TKContact struct {
  PubKey TKey `thrift:"pubKey,1" db:"pubKey" json:"pubKey"`
  ListFriend []*TKContactItem `thrift:"listFriend,2" db:"listFriend" json:"listFriend"`
}

func NewTKContact() *TKContact {
  return &TKContact{}
}


func (p *TKContact) GetPubKey() TKey {
  return p.PubKey
}

func (p *TKContact) GetListFriend() []*TKContactItem {
  return p.ListFriend
}
func (p *TKContact) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKContact)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.PubKey = temp
}
  return nil
}

func (p *TKContact)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TKContactItem, 0, size)
  p.ListFriend =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TKContactItem{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.ListFriend = append(p.ListFriend, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TKContact) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TKContact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKContact) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pubKey: ", p), err) }
  if err := oprot.WriteString(string(p.PubKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pubKey: ", p), err) }
  return err
}

func (p *TKContact) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listFriend", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:listFriend: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListFriend)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListFriend {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:listFriend: ", p), err) }
  return err
}

func (p *TKContact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKContact(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Data
type TDataResult_ struct {
  ErrorCode TErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Data []*TKContactItem `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewTDataResult_() *TDataResult_ {
  return &TDataResult_{}
}


func (p *TDataResult_) GetErrorCode() TErrorCode {
  return p.ErrorCode
}
var TDataResult__Data_DEFAULT []*TKContactItem

func (p *TDataResult_) GetData() []*TKContactItem {
  return p.Data
}
func (p *TDataResult_) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TKContactItem, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &TKContactItem{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Data = append(p.Data, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *TDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Data {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *TDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataResult_(%+v)", *p)
}

type TContactStoreService interface {
  // Parameters:
  //  - Key
  GetData(ctx context.Context, key TKey) (r *TDataResult_, err error)
  // Parameters:
  //  - Key
  //  - Data
  PutData(ctx context.Context, key TKey, data *TKContact) (r TErrorCode, err error)
  // Parameters:
  //  - Key
  //  - Item
  AddItem(ctx context.Context, key TKey, item *TKContactItem) (r TErrorCode, err error)
  // Parameters:
  //  - Key
  //  - Item
  EditItem(ctx context.Context, key TKey, item *TKContactItem) (r TErrorCode, err error)
  // Parameters:
  //  - Key
  //  - PubKeyItem
  DeleteItem(ctx context.Context, key TKey, pubKeyItem string) (r TErrorCode, err error)
  // Parameters:
  //  - Key
  //  - ListPubKeyItemExist
  SynContact(ctx context.Context, key TKey, listPubKeyItemExist []string) (r *TDataResult_, err error)
  // Parameters:
  //  - Key
  //  - NumLast
  GetLastConversation(ctx context.Context, key TKey, numLast int32) (r *TDataResult_, err error)
}

type TContactStoreServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTContactStoreService instead
func NewTContactStoreServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TContactStoreServiceClient {
  return &TContactStoreServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTContactStoreService instead
func NewTContactStoreServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TContactStoreServiceClient {
  return &TContactStoreServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTContactStoreServiceClient(c thrift.TClient) *TContactStoreServiceClient {
  return &TContactStoreServiceClient{
    c: c,
  }
}

// Parameters:
//  - Key
func (p *TContactStoreServiceClient) GetData(ctx context.Context, key TKey) (r *TDataResult_, err error) {
  var _args4 TContactStoreServiceGetDataArgs
  _args4.Key = key
  var _result5 TContactStoreServiceGetDataResult
  if err = p.c.Call(ctx, "getData", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Data
func (p *TContactStoreServiceClient) PutData(ctx context.Context, key TKey, data *TKContact) (r TErrorCode, err error) {
  var _args6 TContactStoreServicePutDataArgs
  _args6.Key = key
  _args6.Data = data
  var _result7 TContactStoreServicePutDataResult
  if err = p.c.Call(ctx, "putData", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Item
func (p *TContactStoreServiceClient) AddItem(ctx context.Context, key TKey, item *TKContactItem) (r TErrorCode, err error) {
  var _args8 TContactStoreServiceAddItemArgs
  _args8.Key = key
  _args8.Item = item
  var _result9 TContactStoreServiceAddItemResult
  if err = p.c.Call(ctx, "addItem", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Item
func (p *TContactStoreServiceClient) EditItem(ctx context.Context, key TKey, item *TKContactItem) (r TErrorCode, err error) {
  var _args10 TContactStoreServiceEditItemArgs
  _args10.Key = key
  _args10.Item = item
  var _result11 TContactStoreServiceEditItemResult
  if err = p.c.Call(ctx, "editItem", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - PubKeyItem
func (p *TContactStoreServiceClient) DeleteItem(ctx context.Context, key TKey, pubKeyItem string) (r TErrorCode, err error) {
  var _args12 TContactStoreServiceDeleteItemArgs
  _args12.Key = key
  _args12.PubKeyItem = pubKeyItem
  var _result13 TContactStoreServiceDeleteItemResult
  if err = p.c.Call(ctx, "deleteItem", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - ListPubKeyItemExist
func (p *TContactStoreServiceClient) SynContact(ctx context.Context, key TKey, listPubKeyItemExist []string) (r *TDataResult_, err error) {
  var _args14 TContactStoreServiceSynContactArgs
  _args14.Key = key
  _args14.ListPubKeyItemExist = listPubKeyItemExist
  var _result15 TContactStoreServiceSynContactResult
  if err = p.c.Call(ctx, "synContact", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - NumLast
func (p *TContactStoreServiceClient) GetLastConversation(ctx context.Context, key TKey, numLast int32) (r *TDataResult_, err error) {
  var _args16 TContactStoreServiceGetLastConversationArgs
  _args16.Key = key
  _args16.NumLast = numLast
  var _result17 TContactStoreServiceGetLastConversationResult
  if err = p.c.Call(ctx, "getLastConversation", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

type TContactStoreServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TContactStoreService
}

func (p *TContactStoreServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TContactStoreServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TContactStoreServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTContactStoreServiceProcessor(handler TContactStoreService) *TContactStoreServiceProcessor {

  self18 := &TContactStoreServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self18.processorMap["getData"] = &tContactStoreServiceProcessorGetData{handler:handler}
  self18.processorMap["putData"] = &tContactStoreServiceProcessorPutData{handler:handler}
  self18.processorMap["addItem"] = &tContactStoreServiceProcessorAddItem{handler:handler}
  self18.processorMap["editItem"] = &tContactStoreServiceProcessorEditItem{handler:handler}
  self18.processorMap["deleteItem"] = &tContactStoreServiceProcessorDeleteItem{handler:handler}
  self18.processorMap["synContact"] = &tContactStoreServiceProcessorSynContact{handler:handler}
  self18.processorMap["getLastConversation"] = &tContactStoreServiceProcessorGetLastConversation{handler:handler}
return self18
}

func (p *TContactStoreServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x19 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x19.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x19

}

type tContactStoreServiceProcessorGetData struct {
  handler TContactStoreService
}

func (p *tContactStoreServiceProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContactStoreServiceGetDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContactStoreServiceGetDataResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: " + err2.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContactStoreServiceProcessorPutData struct {
  handler TContactStoreService
}

func (p *tContactStoreServiceProcessorPutData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContactStoreServicePutDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContactStoreServicePutDataResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.PutData(ctx, args.Key, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putData: " + err2.Error())
    oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("putData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContactStoreServiceProcessorAddItem struct {
  handler TContactStoreService
}

func (p *tContactStoreServiceProcessorAddItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContactStoreServiceAddItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContactStoreServiceAddItemResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.AddItem(ctx, args.Key, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addItem: " + err2.Error())
    oprot.WriteMessageBegin("addItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContactStoreServiceProcessorEditItem struct {
  handler TContactStoreService
}

func (p *tContactStoreServiceProcessorEditItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContactStoreServiceEditItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("editItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContactStoreServiceEditItemResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.EditItem(ctx, args.Key, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing editItem: " + err2.Error())
    oprot.WriteMessageBegin("editItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("editItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContactStoreServiceProcessorDeleteItem struct {
  handler TContactStoreService
}

func (p *tContactStoreServiceProcessorDeleteItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContactStoreServiceDeleteItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContactStoreServiceDeleteItemResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.DeleteItem(ctx, args.Key, args.PubKeyItem); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteItem: " + err2.Error())
    oprot.WriteMessageBegin("deleteItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContactStoreServiceProcessorSynContact struct {
  handler TContactStoreService
}

func (p *tContactStoreServiceProcessorSynContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContactStoreServiceSynContactArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("synContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContactStoreServiceSynContactResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.SynContact(ctx, args.Key, args.ListPubKeyItemExist); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing synContact: " + err2.Error())
    oprot.WriteMessageBegin("synContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("synContact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContactStoreServiceProcessorGetLastConversation struct {
  handler TContactStoreService
}

func (p *tContactStoreServiceProcessorGetLastConversation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContactStoreServiceGetLastConversationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLastConversation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContactStoreServiceGetLastConversationResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetLastConversation(ctx, args.Key, args.NumLast); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastConversation: " + err2.Error())
    oprot.WriteMessageBegin("getLastConversation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLastConversation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TContactStoreServiceGetDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTContactStoreServiceGetDataArgs() *TContactStoreServiceGetDataArgs {
  return &TContactStoreServiceGetDataArgs{}
}


func (p *TContactStoreServiceGetDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TContactStoreServiceGetDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceGetDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TContactStoreServiceGetDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TContactStoreServiceGetDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContactStoreServiceGetDataResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContactStoreServiceGetDataResult() *TContactStoreServiceGetDataResult {
  return &TContactStoreServiceGetDataResult{}
}

var TContactStoreServiceGetDataResult_Success_DEFAULT *TDataResult_
func (p *TContactStoreServiceGetDataResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TContactStoreServiceGetDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TContactStoreServiceGetDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContactStoreServiceGetDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceGetDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TContactStoreServiceGetDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContactStoreServiceGetDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceGetDataResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Data
type TContactStoreServicePutDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  Data *TKContact `thrift:"data,2" db:"data" json:"data"`
}

func NewTContactStoreServicePutDataArgs() *TContactStoreServicePutDataArgs {
  return &TContactStoreServicePutDataArgs{}
}


func (p *TContactStoreServicePutDataArgs) GetKey() TKey {
  return p.Key
}
var TContactStoreServicePutDataArgs_Data_DEFAULT *TKContact
func (p *TContactStoreServicePutDataArgs) GetData() *TKContact {
  if !p.IsSetData() {
    return TContactStoreServicePutDataArgs_Data_DEFAULT
  }
return p.Data
}
func (p *TContactStoreServicePutDataArgs) IsSetData() bool {
  return p.Data != nil
}

func (p *TContactStoreServicePutDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServicePutDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TContactStoreServicePutDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TKContact{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TContactStoreServicePutDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServicePutDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TContactStoreServicePutDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TContactStoreServicePutDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServicePutDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContactStoreServicePutDataResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContactStoreServicePutDataResult() *TContactStoreServicePutDataResult {
  return &TContactStoreServicePutDataResult{}
}

var TContactStoreServicePutDataResult_Success_DEFAULT TErrorCode
func (p *TContactStoreServicePutDataResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TContactStoreServicePutDataResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContactStoreServicePutDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContactStoreServicePutDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServicePutDataResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TContactStoreServicePutDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServicePutDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContactStoreServicePutDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServicePutDataResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Item
type TContactStoreServiceAddItemArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  Item *TKContactItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTContactStoreServiceAddItemArgs() *TContactStoreServiceAddItemArgs {
  return &TContactStoreServiceAddItemArgs{}
}


func (p *TContactStoreServiceAddItemArgs) GetKey() TKey {
  return p.Key
}
var TContactStoreServiceAddItemArgs_Item_DEFAULT *TKContactItem
func (p *TContactStoreServiceAddItemArgs) GetItem() *TKContactItem {
  if !p.IsSetItem() {
    return TContactStoreServiceAddItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TContactStoreServiceAddItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TContactStoreServiceAddItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceAddItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TContactStoreServiceAddItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TKContactItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TContactStoreServiceAddItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceAddItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TContactStoreServiceAddItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TContactStoreServiceAddItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceAddItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContactStoreServiceAddItemResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContactStoreServiceAddItemResult() *TContactStoreServiceAddItemResult {
  return &TContactStoreServiceAddItemResult{}
}

var TContactStoreServiceAddItemResult_Success_DEFAULT TErrorCode
func (p *TContactStoreServiceAddItemResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TContactStoreServiceAddItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContactStoreServiceAddItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContactStoreServiceAddItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceAddItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TContactStoreServiceAddItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceAddItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContactStoreServiceAddItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceAddItemResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Item
type TContactStoreServiceEditItemArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  Item *TKContactItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTContactStoreServiceEditItemArgs() *TContactStoreServiceEditItemArgs {
  return &TContactStoreServiceEditItemArgs{}
}


func (p *TContactStoreServiceEditItemArgs) GetKey() TKey {
  return p.Key
}
var TContactStoreServiceEditItemArgs_Item_DEFAULT *TKContactItem
func (p *TContactStoreServiceEditItemArgs) GetItem() *TKContactItem {
  if !p.IsSetItem() {
    return TContactStoreServiceEditItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TContactStoreServiceEditItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TContactStoreServiceEditItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceEditItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TContactStoreServiceEditItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TKContactItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TContactStoreServiceEditItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("editItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceEditItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TContactStoreServiceEditItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TContactStoreServiceEditItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceEditItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContactStoreServiceEditItemResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContactStoreServiceEditItemResult() *TContactStoreServiceEditItemResult {
  return &TContactStoreServiceEditItemResult{}
}

var TContactStoreServiceEditItemResult_Success_DEFAULT TErrorCode
func (p *TContactStoreServiceEditItemResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TContactStoreServiceEditItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContactStoreServiceEditItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContactStoreServiceEditItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceEditItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TContactStoreServiceEditItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("editItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceEditItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContactStoreServiceEditItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceEditItemResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - PubKeyItem
type TContactStoreServiceDeleteItemArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  PubKeyItem string `thrift:"pubKeyItem,2" db:"pubKeyItem" json:"pubKeyItem"`
}

func NewTContactStoreServiceDeleteItemArgs() *TContactStoreServiceDeleteItemArgs {
  return &TContactStoreServiceDeleteItemArgs{}
}


func (p *TContactStoreServiceDeleteItemArgs) GetKey() TKey {
  return p.Key
}

func (p *TContactStoreServiceDeleteItemArgs) GetPubKeyItem() string {
  return p.PubKeyItem
}
func (p *TContactStoreServiceDeleteItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceDeleteItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TContactStoreServiceDeleteItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PubKeyItem = v
}
  return nil
}

func (p *TContactStoreServiceDeleteItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceDeleteItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TContactStoreServiceDeleteItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubKeyItem", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pubKeyItem: ", p), err) }
  if err := oprot.WriteString(string(p.PubKeyItem)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubKeyItem (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pubKeyItem: ", p), err) }
  return err
}

func (p *TContactStoreServiceDeleteItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceDeleteItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContactStoreServiceDeleteItemResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContactStoreServiceDeleteItemResult() *TContactStoreServiceDeleteItemResult {
  return &TContactStoreServiceDeleteItemResult{}
}

var TContactStoreServiceDeleteItemResult_Success_DEFAULT TErrorCode
func (p *TContactStoreServiceDeleteItemResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TContactStoreServiceDeleteItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContactStoreServiceDeleteItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContactStoreServiceDeleteItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceDeleteItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TContactStoreServiceDeleteItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceDeleteItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContactStoreServiceDeleteItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceDeleteItemResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - ListPubKeyItemExist
type TContactStoreServiceSynContactArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  ListPubKeyItemExist []string `thrift:"listPubKeyItemExist,2" db:"listPubKeyItemExist" json:"listPubKeyItemExist"`
}

func NewTContactStoreServiceSynContactArgs() *TContactStoreServiceSynContactArgs {
  return &TContactStoreServiceSynContactArgs{}
}


func (p *TContactStoreServiceSynContactArgs) GetKey() TKey {
  return p.Key
}

func (p *TContactStoreServiceSynContactArgs) GetListPubKeyItemExist() []string {
  return p.ListPubKeyItemExist
}
func (p *TContactStoreServiceSynContactArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceSynContactArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TContactStoreServiceSynContactArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ListPubKeyItemExist =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.ListPubKeyItemExist = append(p.ListPubKeyItemExist, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TContactStoreServiceSynContactArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("synContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceSynContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TContactStoreServiceSynContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listPubKeyItemExist", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:listPubKeyItemExist: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ListPubKeyItemExist)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListPubKeyItemExist {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:listPubKeyItemExist: ", p), err) }
  return err
}

func (p *TContactStoreServiceSynContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceSynContactArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContactStoreServiceSynContactResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContactStoreServiceSynContactResult() *TContactStoreServiceSynContactResult {
  return &TContactStoreServiceSynContactResult{}
}

var TContactStoreServiceSynContactResult_Success_DEFAULT *TDataResult_
func (p *TContactStoreServiceSynContactResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TContactStoreServiceSynContactResult_Success_DEFAULT
  }
return p.Success
}
func (p *TContactStoreServiceSynContactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContactStoreServiceSynContactResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceSynContactResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TContactStoreServiceSynContactResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("synContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceSynContactResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContactStoreServiceSynContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceSynContactResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - NumLast
type TContactStoreServiceGetLastConversationArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  NumLast int32 `thrift:"numLast,2" db:"numLast" json:"numLast"`
}

func NewTContactStoreServiceGetLastConversationArgs() *TContactStoreServiceGetLastConversationArgs {
  return &TContactStoreServiceGetLastConversationArgs{}
}


func (p *TContactStoreServiceGetLastConversationArgs) GetKey() TKey {
  return p.Key
}

func (p *TContactStoreServiceGetLastConversationArgs) GetNumLast() int32 {
  return p.NumLast
}
func (p *TContactStoreServiceGetLastConversationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceGetLastConversationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TContactStoreServiceGetLastConversationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumLast = v
}
  return nil
}

func (p *TContactStoreServiceGetLastConversationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastConversation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceGetLastConversationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TContactStoreServiceGetLastConversationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numLast", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numLast: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumLast)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numLast (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numLast: ", p), err) }
  return err
}

func (p *TContactStoreServiceGetLastConversationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceGetLastConversationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContactStoreServiceGetLastConversationResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContactStoreServiceGetLastConversationResult() *TContactStoreServiceGetLastConversationResult {
  return &TContactStoreServiceGetLastConversationResult{}
}

var TContactStoreServiceGetLastConversationResult_Success_DEFAULT *TDataResult_
func (p *TContactStoreServiceGetLastConversationResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TContactStoreServiceGetLastConversationResult_Success_DEFAULT
  }
return p.Success
}
func (p *TContactStoreServiceGetLastConversationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContactStoreServiceGetLastConversationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContactStoreServiceGetLastConversationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TContactStoreServiceGetLastConversationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastConversation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContactStoreServiceGetLastConversationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContactStoreServiceGetLastConversationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContactStoreServiceGetLastConversationResult(%+v)", *p)
}


